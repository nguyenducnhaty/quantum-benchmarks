#!/bin/sh
FILE_PATH=$(readlink -f "$0")
BASE_PATH=$(dirname "$FILE_PATH")
ROOT_PATH="$BASE_PATH/.."
NCORES=$(grep ^cpu\\scores /proc/cpuinfo | uniq |  awk '{print $4}')

# benchmark pytest-benchmark based scripts
benchmark_pytest() {
    # set threads to one
    export OMP_NUM_THREADS=1
    export MKL_NUM_THREADS=1
    export MKL_DOMAIN_NUM_THREADS=1

    pytest "$1/benchmarks.py" --benchmark-save=$1 --benchmark-sort=name --benchmark-min-rounds=5 > $1.out 2> $1.err
}

# benchmark Julia BenchmarkTools based scripts
benchmark_julia() {
    export JULIA_NUM_THREADS=1
    export OMP_NUM_THREADS=1
    export MKL_NUM_THREADS=1

    julia --project yao/benchmarks.jl yao.csv yao_qcbm.csv yao_qcbm_batch.csv > yao.out 2> yao.err
}

install() {
    # install Python dependencies
    echo "creating local virtualenv"
    conda create -y --prefix=env
    echo "activating virtualenv"
    source activate ./env
    echo "installing Python dependencies"
    conda install -p env -y numpy matplotlib mkl-service pytest pybind11 pytest-benchmark ipython
    ./env/bin/pip install qiskit qiskit-aer-gpu cirq projectq pyquest-cffi pennylane qulacs-gpu

    # install Julia dependencies
    echo "installing Julia dependencies"
    julia --project -e "using Pkg; Pkg.instantiate()"
}

benchmark_all_parallel(){
    # start benchmark
    benchmark_pytest cirq       &
    benchmark_pytest qiskit     &
    benchmark_pytest projectq   &
    benchmark_pytest pennylane  &
    benchmark_pytest qulacs     &
    benchmark_pytest quest      &
    benchmark_julia             &
}

benchmark_all(){
    # start benchmark
    benchmark_pytest cirq
    benchmark_pytest qiskit
    benchmark_pytest projectq
    benchmark_pytest pennylane
    benchmark_pytest qulacs
    benchmark_pytest quest
    benchmark_julia
}

benchmark(){
    case $1 in
        yao) (cd $ROOT_PATH && benchmark_julia)
        ;;
        *) (cd $ROOT_PATH && benchmark_pytest $1)
    esac
}

help() {
    echo "
    Quantum Circuit Simulation Benchmark

install                 install dependencies
run [package]           run benchmark of [package] or run all benchmarks by default
parallel [package]      spawn [package] benchmark in a process or run all benchmark in parallel by default
help                    print this message
"
}

single_arg() {
    case $1 in
        install) (cd $ROOT_PATH && install)
        ;;
        run) (cd $ROOT_PATH && benchmark)
        ;;
        parallel) (cd $ROOT_PATH && benchmark_all_parallel)
        ;;
        *) help
        ;;
    esac
}

double_arg() {
    case $1 in
        run) benchmark $2
        ;;
        parallel) benchmark $2 &
        ;;
        *) help
    esac
}

case $# in
    1) single_arg $1
    ;;
    2) double_arg $1 $2
    ;;
    *) help
esac
